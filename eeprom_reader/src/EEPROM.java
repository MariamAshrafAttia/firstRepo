/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Mariam
 */
import com.fazecast.jSerialComm.SerialPort;
import java.awt.Color;
import com.fazecast.jSerialComm.SerialPortDataListener;
import com.fazecast.jSerialComm.SerialPortEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
public class EEPROM extends javax.swing.JFrame {
    String selectedPort;
    /**
     * Creates new form EEPROM
     */
    public EEPROM() {
        initComponents();
        jLabel4.setVisible(false);

    }
    
    

    private void checkPortStatus() {
    if (serialPort != null && serialPort.isOpen()) {
        try {
            byte[] readBuffer = new byte[1];
            int numRead = serialPort.readBytes(readBuffer, readBuffer.length);

            if (numRead < 0) {
                // No data read, might be disconnected
                updateDisconnectionStatus();
            } else {
                // Port is open and responsive
                jLabel3.setText("Connected");
                jLabel3.setOpaque(true);
                jLabel3.setBackground(Color.GREEN);
            }
        } catch (Exception e) {
            // Handle read exceptions to update the status
            updateDisconnectionStatus();
        }
    } else {
        // Port is not open or initialized
        updateDisconnectionStatus();
    }
}

    
    

    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        ComPort = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton1.setText("Connect");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(42, 29, -1, -1));

        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton2.setText("Disconnect");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(213, 29, -1, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Address");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(117, 148, 67, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Value");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(117, 200, 50, 22));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(233, 148, 287, -1));

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(233, 201, 287, -1));

        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton3.setText("Write");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(236, 279, 89, -1));

        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButton4.setText("Read");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(492, 279, 107, -1));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(157, 326, 549, 154));

        ComPort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "COM10", "COM11", "COM8", "COM3", "COM4", "COM5" }));
        ComPort.setToolTipText("");
        ComPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComPortActionPerformed(evt);
            }
        });
        jPanel1.add(ComPort, new org.netbeans.lib.awtextra.AbsoluteConstraints(366, 33, 117, -1));

        jLabel3.setBackground(new java.awt.Color(255, 0, 51));
        jLabel3.setText("Disconnected");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 36, 81, -1));

        jLabel4.setText("jLabel4");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 360, 76, -1));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/background.jpg"))); // NOI18N
        jLabel5.setText("jLabel5");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 570));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         // Connect to the selected COM port
         selectedPort = ComPort.getSelectedItem().toString();
    
   /* if (selectedPort == null || selectedPort.isEmpty()) {
        javax.swing.JOptionPane.showMessageDialog(this, "No COM port selected.", "Connection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        return;
    }*/

    serialPort = SerialPort.getCommPort(selectedPort);
    serialPort.setComPortParameters(9600, 8, SerialPort.ONE_STOP_BIT, SerialPort.NO_PARITY);
    serialPort.setComPortTimeouts(SerialPort.TIMEOUT_WRITE_BLOCKING, 0, 0);

    if (serialPort.openPort()) {
        System.out.println("Port opened successfully on " + selectedPort);
        sendDataToPort("#C");  // Sending connection message
        jLabel3.setText("Connected");
        jLabel3.setOpaque(true);
        jLabel3.setBackground(Color.GREEN);
    } else {
        String errorMessage = "Failed to open " + selectedPort + " port.";
        System.out.println(errorMessage);
        javax.swing.JOptionPane.showMessageDialog(this, errorMessage, "Connection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        updateDisconnectionStatus();
    }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void ComPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComPortActionPerformed
        // Read data from Arduino
        sendDataToPort("#R");  // Sending read request
        byte[] readBuffer = new byte[1024];
        int numRead = serialPort.readBytes(readBuffer, readBuffer.length);
        String receivedData = new String(readBuffer, 0, numRead);
        jTextArea1.append(receivedData + "\n");
        System.out.println("Data received: " + receivedData);
    }//GEN-LAST:event_ComPortActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (serialPort != null && serialPort.isOpen()) 
        {
        sendDataToPort("#D");  // Sending disconnect message
        serialPort.closePort();
        System.out.println("Port closed.");
        updateDisconnectionStatus();  // Update status on disconnection
       // jLabel3.setText("Disconnected"); // Update status label text
       // jLabel3.setOpaque(true);
        //jLabel3.setBackground(Color.red);;//set label color to red
        } 
        else 
        {
        System.out.println("Port was not open.");
        updateDisconnectionStatus();  // Update status if port was already closed
       // jLabel3.setText("Disconnected"); // Update status label
       // jLabel3.setOpaque(true);
       // jLabel3.setBackground(Color.red);//set label color to red
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (serialPort.openPort()) 
        {
        jLabel3.setText("Connected");
        jLabel3.setOpaque(true);
        jLabel3.setBackground(Color.GREEN);
        } 
        else 
        {
        String errorMessage = "Failed to open " + selectedPort + " port.";
        javax.swing.JOptionPane.showMessageDialog(this, errorMessage, "Connection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        updateDisconnectionStatus();
        return;
        }
        // Read data from Arduino
     if (serialPort != null ) {//&& serialPort.isOpen()
        // Send read request
        sendDataToPort("#R");  

        // Read data from Arduino
        byte[] readBuffer = new byte[1024];
        int numRead = serialPort.readBytes(readBuffer, readBuffer.length);
        String receivedData = new String(readBuffer, 0, numRead);
        jTextArea1.append(receivedData + "\n");
        System.out.println("Data received: " + receivedData);

        // Update jLabel4 with text from jTextField1
        // Convert the address to uppercase
        String address = jTextField1.getText().toUpperCase();
        if (isValidHex(address) && isAddressWithinRange(address)) {
            jLabel4.setText("ROM 0x" + address);
            jLabel4.setVisible(true);  // Make label visible
        } else {
            jLabel4.setVisible(false); // Hide label if address is invalid
        }

        // Update status to connected
        jLabel3.setText("Connected");
        jLabel3.setOpaque(true);
        jLabel3.setBackground(Color.GREEN);
    } else {
        // Handle case where serial port is not open
        String errorMessage = "Serial port is not open.";
        javax.swing.JOptionPane.showMessageDialog(this, errorMessage, "Connection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        updateDisconnectionStatus();
        jLabel4.setVisible(false); // Hide label if port is not open
    }
        /*if (serialPort.openPort()) 
        {
        jLabel3.setText("Connected");
        jLabel3.setOpaque(true);
        jLabel3.setBackground(Color.GREEN);
        } 
        else 
        {
        String errorMessage = "Failed to open " + selectedPort + " port.";
        javax.swing.JOptionPane.showMessageDialog(this, errorMessage, "Connection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        updateDisconnectionStatus();
        return;
        }
        // Read data from Arduino
        sendDataToPort("#R");  // Sending read request
        byte[] readBuffer = new byte[1024];
        int numRead = serialPort.readBytes(readBuffer, readBuffer.length);
        String receivedData = new String(readBuffer, 0, numRead);
        jTextArea1.append(receivedData + "\n");
        System.out.println("Data received: " + receivedData);*/
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        

        if (serialPort.openPort()) {
        jLabel3.setText("Connected");
        jLabel3.setOpaque(true);
        jLabel3.setBackground(Color.GREEN);
    } else {
        String errorMessage = "Failed to open " + selectedPort + " port.";
        javax.swing.JOptionPane.showMessageDialog(this, errorMessage, "Connection Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        updateDisconnectionStatus();
        return;
    }
        // Write data to Arduino
        // Convert the address  to uppercase
        String address = jTextField1.getText().toUpperCase();
        String value = jTextField2.getText();
        if (isValidHex(address) && isAddressWithinRange(address)) {
        sendDataToPort("#W" + address);  // Write address
        sendDataToPort("#K" + value);  // Write value (no validation required)
        } else {
            System.out.println("Invalid data. Address/Value should be between 00 to FF.");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed
    
    
    private void sendDataToPort(String data) {
       try {
        if (serialPort != null && serialPort.isOpen()) {
            byte[] sendData = data.getBytes();
            serialPort.writeBytes(sendData, sendData.length);
            System.out.println("Sent: " + data);
        } else {
            System.out.println("Serial port not open. Cannot send data.");
        }
        } catch (Exception e) {
        System.out.println("Exception in sending data: " + e.getMessage());
        // Optionally, update the UI to show the disconnection
        updateDisconnectionStatus();
    }
    }

    private boolean isValidHex(String value) {
        return value.matches("^[0-9A-Fa-f]{2}$");
    }
    
    
    private boolean isAddressWithinRange(String address) {
    // Convert address to uppercase to handle both FF and ff cases
    int addressValue = Integer.parseInt(address.toUpperCase(), 16);
    return addressValue >= 0x00 && addressValue <= 0xFF;
}
    
    
    /**
     * @param args the command line arguments
     */
    private SerialPort serialPort;
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EEPROM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComPort;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    private void updateDisconnectionStatus() {
        jLabel3.setText("Disconnected"); // Update status label text
            jLabel3.setOpaque(true);
            jLabel3.setBackground(Color.RED); // Set label color to red
}
    
    
    
   
}
